
syntax = "proto3";

package auth;

option go_package = "Lopsrc.sso.v1;ssov1";

// Auth is service for managing permissions and roles.
service Auth {
  // Register registers a new user.
  rpc Register (RegisterRequest) returns (RegisterResponse);
  // Login logs in a user and returns an auth token.
  rpc Login (LoginRequest) returns (LoginResponse);
  /// Update change data.
  rpc Update (UpdateRequest) returns (UpdateResponse);
  // Delete data.
  rpc Delete (DeleteRequest) returns (DeleteResponse);
  // IsAdmin checks whether a user is an admin.
  rpc Recover (RecoverRequest) returns (RecoverResponse);
  rpc IsAdmin (IsAdminRequest) returns (IsAdminResponse);
}

message IsAdminRequest {
  int64 user_id = 1; // User ID to validate.
}

message IsAdminResponse {
  bool is_admin = 1;  // Indicates whether the user is an admin.
}

message RegisterRequest {
  int32 app_id = 1; // App ID 
  string email = 2; // Email of the user to register.
  string password = 3; // Password of the user to register.
}

message RegisterResponse {
  string token = 1; // Auth token of the logged in user.
}

message LoginRequest {
  string email = 1; // Email of the user to login.
  string password = 2; // Password of the user to login.
  int32 app_id = 3; // ID of the app to login to.
}

message LoginResponse {
  string token = 1; // Auth token of the logged in user.
}

message UpdateRequest {
  int32  app_id   = 1; // ID of the app to login to.
  string token    = 2; // Auth token 
  string password = 3; // Password 
}

message UpdateResponse {
  string token = 1; // Auth token of the logged in user.
}

message DeleteRequest {
  string token = 1; // Auth token of the logged in user.
}

message DeleteResponse {
  bool isDelete = 1; // Auth token of the logged in user.
}

message RecoverRequest {
  string email = 1; // Email of the user to login.
  string password = 2; // Password of the user to login.
}

message RecoverResponse {
  bool isRecover = 1; // Auth token of the logged in user.
}